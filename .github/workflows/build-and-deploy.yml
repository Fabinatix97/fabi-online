name: Build and deploy
permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  create-diagram:
    name: Create Diagram ‚úèÔ∏è
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Generate repository diagram
        uses: githubocto/repo-visualizer@0.9.1
        with:
          output_file: repo-diagram.svg
          should_push: true
      - name: Upload repo diagram as artifact (optional)
        uses: actions/upload-artifact@v4
        with:
          name: repo-diagram
          path: repo-diagram.svg

  lint:
    name: Lint üîç
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install
      - name: Run linting
        run: npm run lint

  type-check:
    name: TypeScript Check ‚úÖ
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install
      - name: Run Nuxt typecheck
        run: npx nuxi typecheck

  sonarqube:
    name: SonarQube üê¨
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.1.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=Fabinatix97_fabi-online
          -Dsonar.organization=fabinatix97
    # - name: SonarQube Quality Gate Check
    #   id: sonarqube-quality-gate-check
    #   uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  unit-tests:
    name: Run Unit Tests üß™
    runs-on: ubuntu-latest
    needs: [lint, sonarqube, type-check] 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install
      - name: Run unit tests with Vitest
        run: npx vitest run --reporter=dot

  build:
    name: Build üèóÔ∏è
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm install
      - name: Build dependencies
        run: npx nuxi generate
      - name: List directory contents
        run: ls -alh
      - name: Archive production artifact
        uses: actions/upload-artifact@main
        with:
          name: dist
          path: dist

  deploy:
    name: Deploy üöÄ
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@main
        with:
          name: dist
          path: dist
      - name: List directory contents
        run: ls -alh
      - name: Synch files to hosting
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: fabi-online.de
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: 21
          protocol: ftps
          local-dir: dist/
          server-dir: /htdocs/fabi-online/
          security: loose
