name: Build and deploy
permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  # create-diagram:
  #   name: Create Diagram
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     - name: Generate repository diagram
  #       uses: githubocto/repo-visualizer@0.9.1
  #       with:
  #         output_file: repo-diagram.svg
  #         should_push: true
  #     - name: Upload repo diagram as artifact (optional)
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: repo-diagram
  #         path: repo-diagram.svg

  todo-to-issue:
    name: Run TODO to Issue
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: TODO to Issue
        uses: alstr/todo-to-issue-action@v5
        with:
          AUTO_ASSIGN: true
          CLOSE_ISSUES: true
          INSERT_ISSUE_URLS: true
      - name: Set Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - name: Commit and Push Changes
        run: |
          git add -A
          if [[ `git status --porcelain` ]]; then
            git commit -m "Automatically added GitHub issue links to TODOs"
            git push origin main
          else
            echo "No changes to commit"
          fi

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm ci
      - name: Run linting
        run: npm run lint

  type-check:
    name: TypeScript Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm ci
      - name: Run Nuxt typecheck
        run: npx nuxi typecheck

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: [lint, type-check] 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests with Vitest and generate coverage
        run: npx vitest run --coverage.enabled true --coverage.reporter lcov
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/lcov.info
  
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=Fabinatix97_fabi-online
            -Dsonar.organization=fabinatix97
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
      # - name: SonarQube Quality Gate Check
      #   id: sonarqube-quality-gate-check
      #   uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Build dependencies
        run: npx nuxi generate
      - name: List directory contents
        run: ls -alh
      - name: Archive production artifact
        uses: actions/upload-artifact@main
        with:
          name: dist
          path: dist

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@main
        with:
          name: dist
          path: dist
      - name: List directory contents
        run: ls -alh
      - name: Synch files to hosting
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: fabi-online.de
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: 21
          protocol: ftps
          local-dir: dist/
          server-dir: /htdocs/fabi-online/
          security: loose
          exclude: |
            __nuxt_content/blog/sql_dump
